"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _identity=_interopRequireDefault(require("./identity"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function asyncGeneratorStep(e,t,n,r,i,a,o){try{var u=e[a](o),c=u.value}catch(e){return void n(e)}u.done?t(c):Promise.resolve(c).then(r,i)}function _asyncToGenerator(u){return function(){var e=this,o=arguments;return new Promise(function(t,n){var r=u.apply(e,o);function i(e){asyncGeneratorStep(r,t,n,i,a,"next",e)}function a(e){asyncGeneratorStep(r,t,n,i,a,"throw",e)}i(void 0)})}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var IdentityMiddleware=function e(t){var a=this;_classCallCheck(this,e),_defineProperty(this,"inject",function(){var n=_asyncToGenerator(regeneratorRuntime.mark(function e(t,n){var r,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,a.getIdentity(t);case 3:if(null!=(i=e.sent)&&null!==(r=i.claims)&&void 0!==r&&r.require2fa)throw new Error("2FA verification required");e.next=6;break;case 6:return t.$identity=i,e.next=9,n();case 9:e.next=16;break;case 11:e.prev=11,e.t0=e.catch(0),console.log("Failed validating authentication token",e.t0.message),t.status=401,t.body={error:e.t0.name||"Failed validating authentication token"};case 16:case"end":return e.stop()}},e,null,[[0,11]])}));return function(e,t){return n.apply(this,arguments)}}()),_defineProperty(this,"getIdentity",function(e){var t,n=(null===(t=e.headers.authorization)||void 0===t?void 0:t.split(" "))||[],r=n[1];return(r=r||n[0])?a.authTokenMapper.verify(r):{identity:_identity.default.anonymous}}),this.authTokenMapper=t};exports.default=IdentityMiddleware;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlkZW50aXR5TWlkZGxld2FyZS5qcyJdLCJuYW1lcyI6WyJfaWRlbnRpdHkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIklkZW50aXR5TWlkZGxld2FyZSIsImF1dGhUb2tlbk1hcHBlciIsIl90aGlzIiwidGhpcyIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9yZWYiLCJfYXN5bmNUb0dlbmVyYXRvciIsInJlZ2VuZXJhdG9yUnVudGltZSIsIm1hcmsiLCJfY2FsbGVlIiwiY3R4IiwibmV4dCIsIl9pZGVudGl0eSRjbGFpbXMiLCJpZGVudGl0eSIsIndyYXAiLCJfY29udGV4dCIsInByZXYiLCJnZXRJZGVudGl0eSIsInNlbnQiLCJjbGFpbXMiLCJyZXF1aXJlMmZhIiwiRXJyb3IiLCIkaWRlbnRpdHkiLCJ0MCIsImNvbnNvbGUiLCJsb2ciLCJtZXNzYWdlIiwic3RhdHVzIiwiYm9keSIsImVycm9yIiwibmFtZSIsInN0b3AiLCJfeCIsIl94MiIsImFwcGx5IiwiYXJndW1lbnRzIiwiX2N0eCRoZWFkZXJzJGF1dGhvcml6IiwiX3JlZjIiLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsInNwbGl0IiwidG9rZW4iLCJ2ZXJpZnkiLCJJZGVudGl0eSIsImFub255bW91cyJdLCJtYXBwaW5ncyI6IjJGQUFBLElBQUFBLFVBQUFDLHVCQUFBQyxRQUFBLDBzQkFFcUJDLG1CQUNuQixTQUFBQSxFQUFZQyxHQUFpQixJQUFBQyxFQUFBQyxLQUFBQyxnQkFBQUQsS0FBQUgsR0FBQUssZ0JBQUFGLEtBQUEsU0FBQSxXQUFBLElBQUFHLEVBQUFDLGtCQUFBQyxtQkFBQUMsS0FIL0IsU0FBQUMsRUFBQUMsRUFBQUMsR0FBQSxJQUFBQyxFQUFBQyxFQUFBLE9BQUFOLG1CQUFBTyxLQUFBLFNBQUFDLEdBQUEsT0FBQSxPQUFBQSxFQUFBQyxLQUFBRCxFQUFBSixNQUFBLEtBQUEsRUFBQSxPQUFBSSxFQUFBQyxLQUFBLEVBQUFELEVBQUFKLEtBQUEsRUFTNkJWLEVBQUtnQixZQUFZUCxHQVQ5QyxLQUFBLEVBQUEsR0FVVUcsT0FERUEsRUFUWkUsRUFBQUcsT0FBQSxRQUFBTixFQVVVQyxFQUFVTSxjQVZwQixJQUFBUCxHQVVVQSxFQUFrQlEsV0FWNUIsTUFVOEMsSUFBSUMsTUFBTSw2QkFWeEROLEVBQUFKLEtBQUEsRUFBQSxNQUFBLEtBQUEsRUFBQSxPQVdNRCxFQUFJWSxVQUFZVCxFQVh0QkUsRUFBQUosS0FBQSxFQVlZQSxJQVpaLEtBQUEsRUFBQUksRUFBQUosS0FBQSxHQUFBLE1BQUEsS0FBQSxHQUFBSSxFQUFBQyxLQUFBLEdBQUFELEVBQUFRLEdBQUFSLEVBQUEsTUFBQSxHQWVNUyxRQUFRQyxJQUFJLHlDQUEwQ1YsRUFBQVEsR0FBSUcsU0FDMURoQixFQUFJaUIsT0FBUyxJQUNiakIsRUFBSWtCLEtBQU8sQ0FDVEMsTUFBT2QsRUFBQVEsR0FBSU8sTUFBUSwwQ0FsQjNCLEtBQUEsR0FBQSxJQUFBLE1BQUEsT0FBQWYsRUFBQWdCLFNBQUF0QixFQUFBLEtBQUEsQ0FBQSxDQUFBLEVBQUEsU0FHK0IsT0FBQSxTQUFBdUIsRUFBQUMsR0FBQSxPQUFBNUIsRUFBQTZCLE1BQUFoQyxLQUFBaUMsWUFBQSxJQUFBL0IsZ0JBQUFGLEtBQUEsY0FvQmYsU0FBQVEsR0FBTyxJQUFBMEIsRUFBQUMsR0FwQlEsUUFBQUQsRUFBQTFCLEVBQUE0QixRQUFBQyxxQkFBQSxJQUFBSCxPQUFBLEVBQUFBLEVBQUFJLE1BQUEsT0FBQSxHQUFBQyxFQW9CUkosRUFwQlEsR0FBQSxPQUFBSSxFQUFBQSxHQW9CUkosRUFwQlEsSUFJcEJwQyxFQUFBRCxnQkFBQTBDLE9BQUFELEdBSm9CLENBQUE1QixTQUFBOEIsVUFBQUEsUUFBQUMsYUFDM0IxQyxLQUFLRixnQkFBa0JBIiwiZmlsZSI6ImlkZW50aXR5TWlkZGxld2FyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJZGVudGl0eSBmcm9tICcuL2lkZW50aXR5JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWRlbnRpdHlNaWRkbGV3YXJlIHtcbiAgY29uc3RydWN0b3IoYXV0aFRva2VuTWFwcGVyKSB7XG4gICAgdGhpcy5hdXRoVG9rZW5NYXBwZXIgPSBhdXRoVG9rZW5NYXBwZXI7XG4gIH1cblxuICBpbmplY3QgPSBhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGlkZW50aXR5ID0gYXdhaXQgdGhpcy5nZXRJZGVudGl0eShjdHgpO1xuICAgICAgaWYgKGlkZW50aXR5Py5jbGFpbXM/LnJlcXVpcmUyZmEpIHRocm93IG5ldyBFcnJvcignMkZBIHZlcmlmaWNhdGlvbiByZXF1aXJlZCcpO1xuICAgICAgY3R4LiRpZGVudGl0eSA9IGlkZW50aXR5O1xuICAgICAgYXdhaXQgbmV4dCgpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmxvZygnRmFpbGVkIHZhbGlkYXRpbmcgYXV0aGVudGljYXRpb24gdG9rZW4nLCBlcnIubWVzc2FnZSk7XG4gICAgICBjdHguc3RhdHVzID0gNDAxO1xuICAgICAgY3R4LmJvZHkgPSB7XG4gICAgICAgIGVycm9yOiBlcnIubmFtZSB8fCAnRmFpbGVkIHZhbGlkYXRpbmcgYXV0aGVudGljYXRpb24gdG9rZW4nXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGdldElkZW50aXR5ID0gY3R4ID0+IHtcbiAgICBsZXQgeyBbMF06IHR5cGUsIFsxXTogdG9rZW4gfSA9IGN0eC5oZWFkZXJzLmF1dGhvcml6YXRpb24/LnNwbGl0KCcgJykgfHwgW107XG5cbiAgICB0b2tlbiA9IHRva2VuIHx8IHR5cGU7XG4gICAgaWYgKCF0b2tlbikge1xuICAgICAgcmV0dXJuIHsgaWRlbnRpdHk6IElkZW50aXR5LmFub255bW91cyB9O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hdXRoVG9rZW5NYXBwZXIudmVyaWZ5KHRva2VuKTtcbiAgfVxufVxuIl19

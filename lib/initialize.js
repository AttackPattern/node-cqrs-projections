"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _authTokenMapper=_interopRequireDefault(require("./authTokenMapper")),_identityMiddleware=_interopRequireDefault(require("./identityMiddleware")),_projectionRouter=_interopRequireDefault(require("./projectionRouter")),_testRouter=_interopRequireDefault(require("./testRouter")),_sqlProjectionState=_interopRequireDefault(require("./sqlProjectionState")),_sqlEventFeed=_interopRequireDefault(require("./sqlEventFeed")),_projectionStore=_interopRequireDefault(require("./projectionStore")),_identity=_interopRequireDefault(require("./identity"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function asyncGeneratorStep(e,t,r,n,i,o,u){try{var a=e[o](u),c=a.value}catch(e){return void r(e)}a.done?t(c):Promise.resolve(c).then(n,i)}function _asyncToGenerator(a){return function(){var e=this,u=arguments;return new Promise(function(t,r){var n=a.apply(e,u);function i(e){asyncGeneratorStep(n,t,r,i,o,"next",e)}function o(e){asyncGeneratorStep(n,t,r,i,o,"throw",e)}i(void 0)})}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperty(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var Projections=function e(){_classCallCheck(this,e)};_defineProperty(exports.default=Projections,"initialize",function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){var i,r,n,o,u,a,c,s,l,f,p,d;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return i=t.container,r=t.config,n=t.db,o=t.storeFolder,u=t.viewFolder,a=t.identityMapper,c=void 0===a?function(e){return new _identity.default(e)}:a,i.register("db",function(){return n}),e.next=4,(0,_projectionStore.default)(r("connections").mongoUrl);case 4:return s=new _sqlProjectionState.default,e.next=7,s.getActiveKey();case 7:if(l=e.sent,f=Object.entries(o).reduce(function(e,t){var r=t[0],n=t[1];return e[r]=i.resolve(n),e},{}),p=Object.entries(u).reduce(function(e,t){var r=t[0],n=t[1];return e[r]=Object.entries(n).map(function(e){var t=e[0],r=e[1];return{name:t,view:i.resolve(r,[f])}}),e},{}),d=new _sqlEventFeed.default({db:n,projectionState:s,stores:Object.values(f)}),l)return e.next=14,Promise.all(Object.values(f).map(function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(e.t0=t.reset,e.t0)return e.next=4,t.reset(l);e.next=4;break;case 4:if(e.t1=t.swap,e.t1)return e.next=8,t.swap();e.next=8;break;case 8:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()));e.next=14;break;case 14:return Object.values(f).filter(function(e){return e.onEvent}).forEach(function(t){return d.subscribe(function(e){return t.onEvent(e)})}),e.abrupt("return",{routers:{projection:new _projectionRouter.default(p),test:new _testRouter.default(Object.values(f),d)},middleware:{identity:new _identityMiddleware.default(new _authTokenMapper.default({secret:r.decrypt(r("authentication").secret),identityMapper:c})).inject},stores:f,views:p});case 16:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}());
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluaXRpYWxpemUuanMiXSwibmFtZXMiOlsiX2F1dGhUb2tlbk1hcHBlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2lkZW50aXR5TWlkZGxld2FyZSIsIl9wcm9qZWN0aW9uUm91dGVyIiwiX3Rlc3RSb3V0ZXIiLCJfc3FsUHJvamVjdGlvblN0YXRlIiwiX3NxbEV2ZW50RmVlZCIsIl9wcm9qZWN0aW9uU3RvcmUiLCJfaWRlbnRpdHkiLCJQcm9qZWN0aW9ucyIsIl9jYWxsZWUyIiwiX3JlZiIsImNvbnRhaW5lciIsImNvbmZpZyIsImRiIiwic3RvcmVGb2xkZXIiLCJ2aWV3Rm9sZGVyIiwiX3JlZiRpZGVudGl0eU1hcHBlciIsImlkZW50aXR5TWFwcGVyIiwicHJvamVjdGlvblN0YXRlIiwia2V5Iiwic3RvcmVzIiwidmlld3MiLCJzcWxFdmVudEZlZWQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJ3cmFwIiwiX2NvbnRleHQyIiwicHJldiIsIm5leHQiLCJ0b2tlbiIsIklkZW50aXR5IiwicmVnaXN0ZXIiLCJkZWZhdWx0IiwibW9uZ29VcmwiLCJTcWxQcm9qZWN0aW9uU3RhdGUiLCJnZXRBY3RpdmVLZXkiLCJzZW50IiwiT2JqZWN0IiwiZW50cmllcyIsInJlZHVjZSIsInJlc3VsdCIsIl9yZWYzIiwibmFtZSIsIlN0b3JlIiwicmVzb2x2ZSIsIl9yZWY0IiwiY2xpZW50IiwiY2xpZW50Vmlld3MiLCJtYXAiLCJfcmVmNSIsIlZpZXciLCJ2aWV3IiwiU3FsRXZlbnRGZWVkIiwidmFsdWVzIiwiUHJvbWlzZSIsImFsbCIsIl9yZWY2IiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJtYXJrIiwiX2NhbGxlZSIsInAiLCJfY29udGV4dCIsInQwIiwicmVzZXQiLCJ0MSIsInN3YXAiLCJzdG9wIiwiX3gyIiwiYXBwbHkiLCJ0aGlzIiwiYXJndW1lbnRzIiwiZmlsdGVyIiwic3RvcmUiLCJvbkV2ZW50IiwiZm9yRWFjaCIsInN1YnNjcmliZSIsImUiLCJhYnJ1cHQiLCJyb3V0ZXJzIiwiUHJvamVjdGlvblJvdXRlciIsInRlc3QiLCJUZXN0Um91dGVyIiwiaWRlbnRpdHkiLCJBdXRoVG9rZW5NYXBwZXIiLCJzZWNyZXQiLCJkZWNyeXB0IiwiaW5qZWN0Il0sIm1hcHBpbmdzIjoiMkZBQUEsSUFBQUEsaUJBQUFDLHVCQUFBQyxRQUFBLHNCQUNBQyxvQkFBQUYsdUJBQUFDLFFBQUEseUJBQ0FFLGtCQUFBSCx1QkFBQUMsUUFBQSx1QkFDQUcsWUFBQUosdUJBQUFDLFFBQUEsaUJBRUFJLG9CQUFBTCx1QkFBQUMsUUFBQSx5QkFDQUssY0FBQU4sdUJBQUFDLFFBQUEsbUJBRUFNLGlCQUFBUCx1QkFBQUMsUUFBQSxzQkFQQU8sVUFBQVIsdUJBQUFDLFFBQUEsMHNCQUNBUSxzS0FDQSxTQUFBQyxFQUFBQyxHQUFBLElBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUEsT0FBQUMsbUJBQUFDLEtBQUEsU0FBQUMsR0FBQSxPQUFBLE9BQUFBLEVBQUFDLEtBQUFELEVBQUFFLE1BQUEsS0FBQSxFQUFBLE9BQUFoQixFQUFBRCxFQUFBQyxVQUFBQyxFQUFBRixFQUFBRSxPQUFBQyxFQUFBSCxFQUFBRyxHQUFBQyxFQUFBSixFQUFBSSxZQUFBQyxFQUFBTCxFQUFBSyxXQUFBQyxFQUFBTixFQUFBTyxlQUFBQSxPQUFBLElBQUFELEVBQUEsU0FBQVksR0FBQSxPQUFBLElBQUFDLFVBQUFBLFFBQUFELElBQUFaLEVBV0lMLEVBQVVtQixTQUFTLEtBQU0sV0FBQSxPQUFNakIsSUFYbkNZLEVBQUFFLEtBQUEsR0FhVSxFQUFBckIsaUJBQUF5QixTQUFnQm5CLEVBQU8sZUFBZW9CLFVBYmhELEtBQUEsRUFBQSxPQWVVZCxFQUFrQixJQUFJZSxvQkFBQUEsUUFmaENSLEVBQUFFLEtBQUEsRUFpQnNCVCxFQUFnQmdCLGVBakJ0QyxLQUFBLEVBQUEsR0FpQlVmLEVBakJWTSxFQUFBVSxLQW1CVWYsRUFBU2dCLE9BQU9DLFFBQVF2QixHQUMzQndCLE9BQU8sU0FBQ0MsRUFBREMsR0FBdUMsSUFBdkJDLEVBQXVCRCxFQUEzQixHQUFlRSxFQUFZRixFQUFoQixHQUU3QixPQURBRCxFQUFPRSxHQUFROUIsRUFBVWdDLFFBQVFELEdBQzFCSCxHQUNOLElBRUNsQixFQUFRZSxPQUFPQyxRQUFRdEIsR0FDMUJ1QixPQUFPLFNBQUNDLEVBQURLLEdBQStDLElBQS9CQyxFQUErQkQsRUFBbkMsR0FBaUJFLEVBQWtCRixFQUF0QixHQUUvQixPQURBTCxFQUFPTSxHQUFVVCxPQUFPQyxRQUFRUyxHQUFhQyxJQUFJLFNBQUFDLEdBQUEsSUFBUVAsRUFBUk8sRUFBSSxHQUFlQyxFQUFuQkQsRUFBZSxHQUFmLE1BQStCLENBQUVQLEtBQUFBLEVBQU1TLEtBQU12QyxFQUFVZ0MsUUFBUU0sRUFBTSxDQUFDN0IsT0FDaEhtQixHQUNOLElBRUNqQixFQUFlLElBQUk2QixjQUFBQSxRQUFhLENBQ3BDdEMsR0FBQUEsRUFDQUssZ0JBQUFBLEVBQ0FFLE9BQVFnQixPQUFPZ0IsT0FBT2hDLEtBR3BCRCxFQXJDUixPQUFBTSxFQUFBRSxLQUFBLEdBc0NZMEIsUUFBUUMsSUFBSWxCLE9BQU9nQixPQUFPaEMsR0FBUTJCLElBQXRCLFdBQUEsSUFBQVEsRUFBQUMsa0JBQUFqQyxtQkFBQWtDLEtBQTBCLFNBQUFDLEVBQU1DLEdBQU4sT0FBQXBDLG1CQUFBQyxLQUFBLFNBQUFvQyxHQUFBLE9BQUEsT0FBQUEsRUFBQWxDLEtBQUFrQyxFQUFBakMsTUFBQSxLQUFBLEVBQUEsR0FBQWlDLEVBQUFDLEdBQzFDRixFQUFFRyxNQUR3Q0YsRUFBQUMsR0FBQSxPQUFBRCxFQUFBakMsS0FBQSxFQUN6QmdDLEVBQUVHLE1BQU0zQyxHQURpQnlDLEVBQUFqQyxLQUFBLEVBQUEsTUFBQSxLQUFBLEVBQUEsR0FBQWlDLEVBQUFHLEdBRTFDSixFQUFFSyxLQUZ3Q0osRUFBQUcsR0FBQSxPQUFBSCxFQUFBakMsS0FBQSxFQUUxQmdDLEVBQUVLLE9BRndCSixFQUFBakMsS0FBQSxFQUFBLE1BQUEsS0FBQSxFQUFBLElBQUEsTUFBQSxPQUFBaUMsRUFBQUssU0FBQVAsTUFBMUIsT0FBQSxTQUFBUSxHQUFBLE9BQUFYLEVBQUFZLE1BQUFDLEtBQUFDLFlBQUEsS0F0Q3hCNUMsRUFBQUUsS0FBQSxHQUFBLE1BQUEsS0FBQSxHQUFBLE9BMkNJUyxPQUFPZ0IsT0FBT2hDLEdBQVFrRCxPQUFPLFNBQUFDLEdBQUssT0FBSUEsRUFBTUMsVUFBU0MsUUFBUSxTQUFBZCxHQUFDLE9BQUlyQyxFQUFhb0QsVUFBVSxTQUFBQyxHQUFDLE9BQUloQixFQUFFYSxRQUFRRyxPQTNDNUdsRCxFQUFBbUQsT0FBQSxTQVVzQixDQUFBQyxRQUFBLENBQVNsRSxXQUFBQSxJQUFUbUUsa0JBQUFBLFFBQW9CbEUsR0FBMkRtRSxLQUFBLElBQUFDLFlBQUFBLFFBQVFuRCxPQUFBQSxPQUFTRCxHQUFqQk4sSUFDakdYLFdBQUFBLENBQXlCc0UsU0FBQSxJQUFNcEUsb0JBQUFBLFFBQU4sSUFBQXFFLGlCQUFBQSxRQUFBLENBQUFDLE9BQXpCdkUsRUFBQXdFLFFBQUF4RSxFQUFBLGtCQUFBdUUsUUFEa0JsRSxlQUFBQSxLQUFBb0UsUUFBQWpFLE9BQUFBLEVBS1pGLE1BQUFBLElBZlYsS0FBQSxHQUFBLElBQUEsTUFBQSxPQUFBTyxFQUFBd0MsU0FBQXhEIiwiZmlsZSI6ImluaXRpYWxpemUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXV0aFRva2VuTWFwcGVyIGZyb20gJy4vYXV0aFRva2VuTWFwcGVyJztcbmltcG9ydCBJZGVudGl0eU1pZGRsZXdhcmUgZnJvbSAnLi9pZGVudGl0eU1pZGRsZXdhcmUnO1xuaW1wb3J0IFByb2plY3Rpb25Sb3V0ZXIgZnJvbSAnLi9wcm9qZWN0aW9uUm91dGVyJztcbmltcG9ydCBUZXN0Um91dGVyIGZyb20gJy4vdGVzdFJvdXRlcic7XG5cbmltcG9ydCBTcWxQcm9qZWN0aW9uU3RhdGUgZnJvbSAnLi9zcWxQcm9qZWN0aW9uU3RhdGUnO1xuaW1wb3J0IFNxbEV2ZW50RmVlZCBmcm9tICcuL3NxbEV2ZW50RmVlZCc7XG5cbmltcG9ydCBwcm9qZWN0aW9uU3RvcmUgZnJvbSAnLi9wcm9qZWN0aW9uU3RvcmUnO1xuaW1wb3J0IElkZW50aXR5IGZyb20gJy4vaWRlbnRpdHknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9qZWN0aW9ucyB7XG5cbiAgc3RhdGljIGluaXRpYWxpemUgPSBhc3luYyAoeyBjb250YWluZXIsIGNvbmZpZywgZGIsIHN0b3JlRm9sZGVyLCB2aWV3Rm9sZGVyLCBpZGVudGl0eU1hcHBlciA9IHRva2VuID0+IG5ldyBJZGVudGl0eSh0b2tlbikgfSkgPT4ge1xuICAgIGNvbnRhaW5lci5yZWdpc3RlcignZGInLCAoKSA9PiBkYik7XG5cbiAgICBhd2FpdCBwcm9qZWN0aW9uU3RvcmUoY29uZmlnKCdjb25uZWN0aW9ucycpLm1vbmdvVXJsKTtcblxuICAgIGNvbnN0IHByb2plY3Rpb25TdGF0ZSA9IG5ldyBTcWxQcm9qZWN0aW9uU3RhdGUoKTtcblxuICAgIGNvbnN0IGtleSA9IGF3YWl0IHByb2plY3Rpb25TdGF0ZS5nZXRBY3RpdmVLZXkoKTtcblxuICAgIGNvbnN0IHN0b3JlcyA9IE9iamVjdC5lbnRyaWVzKHN0b3JlRm9sZGVyKVxuICAgICAgLnJlZHVjZSgocmVzdWx0LCB7IFswXTogbmFtZSwgWzFdOiBTdG9yZSB9KSA9PiB7XG4gICAgICAgIHJlc3VsdFtuYW1lXSA9IGNvbnRhaW5lci5yZXNvbHZlKFN0b3JlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0sIHt9KTtcblxuICAgIGNvbnN0IHZpZXdzID0gT2JqZWN0LmVudHJpZXModmlld0ZvbGRlcilcbiAgICAgIC5yZWR1Y2UoKHJlc3VsdCwgeyBbMF06IGNsaWVudCwgWzFdOiBjbGllbnRWaWV3cyB9KSA9PiB7XG4gICAgICAgIHJlc3VsdFtjbGllbnRdID0gT2JqZWN0LmVudHJpZXMoY2xpZW50Vmlld3MpLm1hcCgoeyBbMF06IG5hbWUsIFsxXTogVmlldyB9KSA9PiAoeyBuYW1lLCB2aWV3OiBjb250YWluZXIucmVzb2x2ZShWaWV3LCBbc3RvcmVzXSkgfSkpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSwge30pO1xuXG4gICAgY29uc3Qgc3FsRXZlbnRGZWVkID0gbmV3IFNxbEV2ZW50RmVlZCh7XG4gICAgICBkYixcbiAgICAgIHByb2plY3Rpb25TdGF0ZSxcbiAgICAgIHN0b3JlczogT2JqZWN0LnZhbHVlcyhzdG9yZXMpXG4gICAgfSk7XG4gICAgLy8gaWYgd2UgaGF2ZSBhbiBhY3RpdmUga2V5LCBsZXRzIG1ha2Ugc3VyZSBhbmQgc3dhcCB0aGUgcHJvamVjdGlvbiBzdG9yZXMgb3ZlciB0byB0aGUga2V5ZWQgdmVyc2lvbiBvZiB0aGUgbW9kZWxcbiAgICBpZiAoa2V5KSB7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChPYmplY3QudmFsdWVzKHN0b3JlcykubWFwKGFzeW5jIHAgPT4ge1xuICAgICAgICBwLnJlc2V0ICYmIGF3YWl0IHAucmVzZXQoa2V5KTtcbiAgICAgICAgcC5zd2FwICYmIGF3YWl0IHAuc3dhcCgpO1xuICAgICAgfSkpO1xuICAgIH1cbiAgICBPYmplY3QudmFsdWVzKHN0b3JlcykuZmlsdGVyKHN0b3JlID0+IHN0b3JlLm9uRXZlbnQpLmZvckVhY2gocCA9PiBzcWxFdmVudEZlZWQuc3Vic2NyaWJlKGUgPT4gcC5vbkV2ZW50KGUpKSk7XG5cblxuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXJzOiB7XG4gICAgICAgIHByb2plY3Rpb246IG5ldyBQcm9qZWN0aW9uUm91dGVyKHZpZXdzKSxcbiAgICAgICAgdGVzdDogbmV3IFRlc3RSb3V0ZXIoT2JqZWN0LnZhbHVlcyhzdG9yZXMpLCBzcWxFdmVudEZlZWQpXG4gICAgICB9LFxuICAgICAgbWlkZGxld2FyZToge1xuICAgICAgICBpZGVudGl0eTogbmV3IElkZW50aXR5TWlkZGxld2FyZShuZXcgQXV0aFRva2VuTWFwcGVyKHtcbiAgICAgICAgICBzZWNyZXQ6IGNvbmZpZy5kZWNyeXB0KGNvbmZpZygnYXV0aGVudGljYXRpb24nKS5zZWNyZXQpLFxuICAgICAgICAgIGlkZW50aXR5TWFwcGVyXG4gICAgICAgIH0pKS5pbmplY3RcbiAgICAgIH0sXG4gICAgICBzdG9yZXMsXG4gICAgICB2aWV3c1xuICAgIH07XG4gIH1cbn1cbiJdfQ==

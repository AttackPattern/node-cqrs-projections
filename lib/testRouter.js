"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _koaRouter=_interopRequireDefault(require("koa-router")),_v=_interopRequireDefault(require("uuid/v4"));function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function asyncGeneratorStep(t,e,r,n,o,u,a){try{var s=t[u](a),i=s.value}catch(t){return void r(t)}s.done?e(i):Promise.resolve(i).then(n,o)}function _asyncToGenerator(s){return function(){var t=this,a=arguments;return new Promise(function(e,r){var n=s.apply(t,a);function o(t){asyncGeneratorStep(n,e,r,o,u,"next",t)}function u(t){asyncGeneratorStep(n,e,r,o,u,"throw",t)}o(void 0)})}}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var TestRouter=function(t){function e(o,u){var t;return _classCallCheck(this,e),(t=_possibleConstructorReturn(this,_getPrototypeOf(e).call(this))).get("/reset",function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){var r,n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if("resetting"===(r=u.getState()))return e.status=200,t.abrupt("return",e.body="Reset already in progress");t.next=6;break;case 6:if("starting"===r)return e.status=503,t.abrupt("return",e.body="Projections are still being built");t.next=9;break;case 9:return u.setState("resetting"),n=(0,_v.default)(),t.next=13,Promise.all(o.map(function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(t.t0=e.reset,t.t0)return t.next=4,e.reset(n);t.next=5;break;case 4:t.t0=t.sent;case 5:return t.abrupt("return",t.t0);case 6:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()));case 13:return t.next=15,u.reset(n);case 15:return e.status=200,t.abrupt("return",e.body="Reset all projections and state");case 17:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()),t.get("/version",function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e.status=200,t.abrupt("return",e.body="Projection with subscriber dependency");case 2:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()),t.get("/health",function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:t.t0=u.getState(),t.next="starting"===t.t0?3:5;break;case 3:return e.status=503,t.abrupt("return",e.body="Projections is building");case 5:return e.status=200,t.abrupt("return",e.body="OK");case 7:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()),t}return _inherits(e,_koaRouter.default),e}();exports.default=TestRouter;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RSb3V0ZXIuanMiXSwibmFtZXMiOlsiX2tvYVJvdXRlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3YiLCJUZXN0Um91dGVyIiwic3RvcmVzIiwic3FsRXZlbnRGZWVkIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfZ2V0UHJvdG90eXBlT2YiLCJjYWxsIiwiZ2V0IiwiX3JlZiIsIl9hc3luY1RvR2VuZXJhdG9yIiwicmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUyIiwiY3R4Iiwic3RhdGUiLCJrZXkiLCJ3cmFwIiwiX2NvbnRleHQyIiwicHJldiIsIm5leHQiLCJnZXRTdGF0ZSIsInN0YXR1cyIsImFicnVwdCIsImJvZHkiLCJzZXRTdGF0ZSIsImRlZmF1bHQiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwiX3JlZjIiLCJfY2FsbGVlIiwicCIsIl9jb250ZXh0IiwidDAiLCJyZXNldCIsInNlbnQiLCJzdG9wIiwiX3gyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfeCIsIl9yZWYzIiwiX2NhbGxlZTMiLCJfY29udGV4dDMiLCJfeDMiLCJfcmVmNCIsIl9jYWxsZWU0IiwiX2NvbnRleHQ0IiwiX3g0IiwiUm91dGVyIl0sIm1hcHBpbmdzIjoiMkZBQUEsSUFBQUEsV0FBQUMsdUJBQUFDLFFBQUEsZUFDQUMsR0FBQUYsdUJBQUFDLFFBQUEsNGtEQUVxQkUsdUJBRWpCLFNBQUFBLEVBQVlDLEVBQVFDLEdBQWMsSUFBQUMsRUFBQSxPQUFBQyxnQkFBQUMsS0FBQUwsSUFDbENHLEVBQUFHLDJCQUFBRCxLQUFBRSxnQkFBQVAsR0FBQVEsS0FBQUgsUUFFS0ksSUFBSSxTQUFULFdBQUEsSUFBQUMsRUFBQUMsa0JBQUFDLG1CQUFBQyxLQUFtQixTQUFBQyxFQUFNQyxHQUFOLElBQUFDLEVBQUFDLEVBQUEsT0FBQUwsbUJBQUFNLEtBQUEsU0FBQUMsR0FBQSxPQUFBLE9BQUFBLEVBQUFDLEtBQUFELEVBQUFFLE1BQUEsS0FBQSxFQUFBLEdBRUgsZUFUcEJMLEVBQUFkLEVBQUFvQixZQU91QixPQUdmUCxFQUFJUSxPQUFTLElBSEVKLEVBQUFLLE9BQUEsU0FJUlQsRUFBSVUsS0FBTyw2QkFKSE4sRUFBQUUsS0FBQSxFQUFBLE1BQUEsS0FBQSxFQUFBLEdBTUUsYUFBVkwsRUFOUSxPQU9mRCxFQUFJUSxPQUFTLElBUEVKLEVBQUFLLE9BQUEsU0FRUlQsRUFBSVUsS0FBTyxxQ0FSSE4sRUFBQUUsS0FBQSxFQUFBLE1BQUEsS0FBQSxFQUFBLE9BVWpCbkIsRUFBYXdCLFNBQVMsYUFFaEJULEdBQU0sRUFBQWxCLEdBQUE0QixXQVpLUixFQUFBRSxLQUFBLEdBY1hPLFFBQVFDLElBQUk1QixFQUFPNkIsSUFBUCxXQUFBLElBQUFDLEVBQUFwQixrQkFBQUMsbUJBQUFDLEtBQVcsU0FBQW1CLEVBQU1DLEdBQU4sT0FBQXJCLG1CQUFBTSxLQUFBLFNBQUFnQixHQUFBLE9BQUEsT0FBQUEsRUFBQWQsS0FBQWMsRUFBQWIsTUFBQSxLQUFBLEVBQUEsR0FBQWEsRUFBQUMsR0FBV0YsRUFBRUcsTUFBYkYsRUFBQUMsR0FBQSxPQUFBRCxFQUFBYixLQUFBLEVBQTRCWSxFQUFFRyxNQUFNbkIsR0FBcENpQixFQUFBYixLQUFBLEVBQUEsTUFBQSxLQUFBLEVBQUFhLEVBQUFDLEdBQUFELEVBQUFHLEtBQUEsS0FBQSxFQUFBLE9BQUFILEVBQUFWLE9BQUEsU0FBQVUsRUFBQUMsSUFBQSxLQUFBLEVBQUEsSUFBQSxNQUFBLE9BQUFELEVBQUFJLFNBQUFOLE1BQVgsT0FBQSxTQUFBTyxHQUFBLE9BQUFSLEVBQUFTLE1BQUFuQyxLQUFBb0MsWUFBQSxLQWRELEtBQUEsR0FBQSxPQUFBdEIsRUFBQUUsS0FBQSxHQWdCWG5CLEVBQWFrQyxNQUFNbkIsR0FoQlIsS0FBQSxHQUFBLE9Ba0JqQkYsRUFBSVEsT0FBUyxJQWxCSUosRUFBQUssT0FBQSxTQW1CVlQsRUFBSVUsS0FBTyxtQ0FuQkQsS0FBQSxHQUFBLElBQUEsTUFBQSxPQUFBTixFQUFBbUIsU0FBQXhCLE1BQW5CLE9BQUEsU0FBQTRCLEdBQUEsT0FBQWhDLEVBQUE4QixNQUFBbkMsS0FBQW9DLFlBQUEsSUFzQkF0QyxFQUFLTSxJQUFJLFdBQVQsV0FBQSxJQUFBa0MsRUFBQWhDLGtCQUFBQyxtQkFBQUMsS0FBcUIsU0FBQStCLEVBQU03QixHQUFOLE9BQUFILG1CQUFBTSxLQUFBLFNBQUEyQixHQUFBLE9BQUEsT0FBQUEsRUFBQXpCLEtBQUF5QixFQUFBeEIsTUFBQSxLQUFBLEVBQUEsT0EzQkpyQixFQUFBQSxPQTRCRixJQURNNkMsRUFBQXJCLE9BQUEsU0FFWlQsRUFBSVUsS0FBTyx5Q0FGQyxLQUFBLEVBQUEsSUFBQSxNQUFBLE9BQUFvQixFQUFBUCxTQUFBTSxNQUFyQixPQUFBLFNBQUFFLEdBQUEsT0FBQUgsRUFBQUgsTUFBQW5DLEtBQUFvQyxZQUFBLElBSUF0QyxFQUFLTSxJQUFJLFVBQVQsV0FBQSxJQUFBc0MsRUFBQXBDLGtCQUFBQyxtQkFBQUMsS0FBb0IsU0FBQW1DLEVBQU1qQyxHQUFOLE9BQUFILG1CQUFBTSxLQUFBLFNBQUErQixHQUFBLE9BQUEsT0FBQUEsRUFBQTdCLEtBQUE2QixFQUFBNUIsTUFBQSxLQUFBLEVBQUE0QixFQUFBZCxHQUNWakMsRUFBYW9CLFdBREgyQixFQUFBNUIsS0E3QnBCLGFBNkJvQjRCLEVBQUFkLEdBQUEsRUFBQSxFQUFBLE1BQUEsS0FBQSxFQUFBLE9BN0JjcEIsRUFBQVEsT0FBQSxJQTZCZDBCLEVBQUF6QixPQUFBLFNBSVBULEVBQUlVLEtBQU8sMkJBSkosS0FBQSxFQUFBLE9BTWRWLEVBQUlRLE9BQVMsSUFOQzBCLEVBQUF6QixPQUFBLFNBNUJwQlQsRUFBQVUsS0FBQSxNQTRCb0IsS0FBQSxFQUFBLElBQUEsTUFBQSxPQUFBd0IsRUFBQVgsU0FBQVUsTUFBcEIsT0FBQSxTQUFBRSxHQUFBLE9BQUFILEVBQUFQLE1BQUFuQyxLQUFBb0MsWUFBQSxJQTdCa0N0QyxxQkFGRWdELFdBQUFBIiwiZmlsZSI6InRlc3RSb3V0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUm91dGVyIGZyb20gJ2tvYS1yb3V0ZXInO1xuaW1wb3J0IHV1aWRWNCBmcm9tICd1dWlkL3Y0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVzdFJvdXRlciBleHRlbmRzIFJvdXRlciB7XG5cbiAgICBjb25zdHJ1Y3RvcihzdG9yZXMsIHNxbEV2ZW50RmVlZCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmdldCgnL3Jlc2V0JywgYXN5bmMgY3R4ID0+IHtcbiAgICAgIGNvbnN0IHN0YXRlID0gc3FsRXZlbnRGZWVkLmdldFN0YXRlKCk7XG4gICAgICBpZiAoc3RhdGUgPT09ICdyZXNldHRpbmcnKSB7XG4gICAgICAgIGN0eC5zdGF0dXMgPSAyMDA7XG4gICAgICAgIHJldHVybiBjdHguYm9keSA9ICdSZXNldCBhbHJlYWR5IGluIHByb2dyZXNzJztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHN0YXRlID09PSAnc3RhcnRpbmcnKSB7XG4gICAgICAgIGN0eC5zdGF0dXMgPSA1MDM7XG4gICAgICAgIHJldHVybiBjdHguYm9keSA9ICdQcm9qZWN0aW9ucyBhcmUgc3RpbGwgYmVpbmcgYnVpbHQnO1xuICAgICAgfVxuICAgICAgc3FsRXZlbnRGZWVkLnNldFN0YXRlKCdyZXNldHRpbmcnKTtcbiAgICAgIC8vIGdlbmVyYXRlIGEgbmV3IGFjdGl2ZSBzdGF0ZSBrZXkgdG8gc3dhcCBvdXIgcHJvamVjdGlvbiB3cml0ZXMgb3ZlciB0b1xuICAgICAgY29uc3Qga2V5ID0gdXVpZFY0KCk7XG4gICAgICAvLyBoYXZlIGFsbCBzdG9yZXMgc3dpdGNoIHRoZWlyIHdyaXRlIG1vZGVsIG92ZXIgdG8gdGhlIG5ldyBrZXlcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKHN0b3Jlcy5tYXAoYXN5bmMgcCA9PiBwLnJlc2V0ICYmIGF3YWl0IHAucmVzZXQoa2V5KSkpO1xuICAgICAgLy8gcmVzZXQgdGhlIGJvb2ttYXJrIGFuZCBzdGFydCByZWJ1aWxkaW5nIHByb2plY3Rpb25zIG9uIHRoZSBuZXcgYm9va21hcmtcbiAgICAgIGF3YWl0IHNxbEV2ZW50RmVlZC5yZXNldChrZXkpO1xuXG4gICAgICBjdHguc3RhdHVzID0gMjAwO1xuICAgICAgcmV0dXJuIGN0eC5ib2R5ID0gJ1Jlc2V0IGFsbCBwcm9qZWN0aW9ucyBhbmQgc3RhdGUnO1xuICAgIH0pO1xuXG4gICAgdGhpcy5nZXQoJy92ZXJzaW9uJywgYXN5bmMgY3R4ID0+IHtcbiAgICAgIGN0eC5zdGF0dXMgPSAyMDA7XG4gICAgICByZXR1cm4gY3R4LmJvZHkgPSAnUHJvamVjdGlvbiB3aXRoIHN1YnNjcmliZXIgZGVwZW5kZW5jeSc7XG4gICAgfSk7XG4gICAgdGhpcy5nZXQoJy9oZWFsdGgnLCBhc3luYyBjdHggPT4ge1xuICAgICAgc3dpdGNoIChzcWxFdmVudEZlZWQuZ2V0U3RhdGUoKSkge1xuICAgICAgICBjYXNlICdzdGFydGluZyc6XG4gICAgICAgICAgY3R4LnN0YXR1cyA9IDUwMztcbiAgICAgICAgICByZXR1cm4gY3R4LmJvZHkgPSAnUHJvamVjdGlvbnMgaXMgYnVpbGRpbmcnO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGN0eC5zdGF0dXMgPSAyMDA7XG4gICAgICAgICAgcmV0dXJuIGN0eC5ib2R5ID0gJ09LJztcbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG59XG4iXX0=

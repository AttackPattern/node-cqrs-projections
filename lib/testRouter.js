"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _koaRouter=_interopRequireDefault(require("koa-router")),_v=_interopRequireDefault(require("uuid/v4"));function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function asyncGeneratorStep(t,e,r,n,o,u,a){try{var s=t[u](a),i=s.value}catch(t){return void r(t)}s.done?e(i):Promise.resolve(i).then(n,o)}function _asyncToGenerator(s){return function(){var t=this,a=arguments;return new Promise(function(e,r){var n=s.apply(t,a);function o(t){asyncGeneratorStep(n,e,r,o,u,"next",t)}function u(t){asyncGeneratorStep(n,e,r,o,u,"throw",t)}o(void 0)})}}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var TestRouter=function(){function e(o,u){var t;return _classCallCheck(this,e),(t=_possibleConstructorReturn(this,_getPrototypeOf(e).call(this))).get("/reset",function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){var r,n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if("resetting"===(r=u.getState())||"reset-start"===r)return e.status=200,t.abrupt("return",e.body="Reset already in progress");t.next=6;break;case 6:if("starting"===r)return e.status=503,t.abrupt("return",e.body="Projections are still being built");t.next=9;break;case 9:return console.log("setting state to resetting"),u.setState("reset-start"),n=(0,_v.default)(),t.next=14,Promise.all(o.map(function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(t.t0=e.reset,t.t0)return t.next=4,e.reset(n);t.next=5;break;case 4:t.t0=t.sent;case 5:return t.abrupt("return",t.t0);case 6:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()));case 14:return t.next=16,u.reset(n);case 16:return e.status=200,t.abrupt("return",e.body="Reset all projections and state");case 18:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()),t.get("/version",function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e.status=200,t.abrupt("return",e.body="Projection with subscriber dependency");case 2:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()),t.get("/health",function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:t.t0=u.getState(),t.next="starting"===t.t0?3:5;break;case 3:return e.status=503,t.abrupt("return",e.body="Projections is building");case 5:return e.status=200,t.abrupt("return",e.body="OK");case 7:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()),t}return _inherits(e,_koaRouter["default"]),e}();exports.default=TestRouter;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RSb3V0ZXIuanMiXSwibmFtZXMiOlsiX2tvYVJvdXRlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3YiLCJUZXN0Um91dGVyIiwic3RvcmVzIiwic3FsRXZlbnRGZWVkIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfZ2V0UHJvdG90eXBlT2YiLCJjYWxsIiwiZ2V0IiwiX3JlZiIsIl9hc3luY1RvR2VuZXJhdG9yIiwicmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUyIiwiY3R4Iiwic3RhdGUiLCJrZXkiLCJ3cmFwIiwiX2NvbnRleHQyIiwicHJldiIsIm5leHQiLCJnZXRTdGF0ZSIsInN0YXR1cyIsImFicnVwdCIsImJvZHkiLCJjb25zb2xlIiwibG9nIiwic2V0U3RhdGUiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwiX3JlZjIiLCJfY2FsbGVlIiwicCIsIl9jb250ZXh0IiwidDAiLCJyZXNldCIsInNlbnQiLCJzdG9wIiwiX3gyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfeCIsIl9jYWxsZWUzIiwiX2NvbnRleHQzIiwiX3JlZjQiLCJfY2FsbGVlNCIsIl9jb250ZXh0NCIsIl94NCIsIlJvdXRlciJdLCJtYXBwaW5ncyI6IjJGQUFBLElBQUFBLFdBQUFDLHVCQUFBQyxRQUFBLGVBQ0FDLEdBQUFGLHVCQUFBQyxRQUFBLDRrREFFcUJFLHNCQUVqQixTQUFBQSxFQUFZQyxFQUFRQyxHQUFjLElBQUFDLEVBQUEsT0FBQUMsZ0JBQUFDLEtBQUFMLElBQ2xDRyxFQUFBRywyQkFBQUQsS0FBQUUsZ0JBQUFQLEdBQUFRLEtBQUFILFFBRUtJLElBQUksU0FBVCxXQUFBLElBQUFDLEVBQUFDLGtCQUFBQyxtQkFBQUMsS0FBbUIsU0FBQUMsRUFBTUMsR0FBTixJQUFBQyxFQUFBQyxFQUFBLE9BQUFMLG1CQUFBTSxLQUFBLFNBQUFDLEdBQUEsT0FBQSxPQUFBQSxFQUFBQyxLQUFBRCxFQUFBRSxNQUFBLEtBQUEsRUFBQSxHQUVILGVBVHBCTCxFQUFBZCxFQUFBb0IsYUFTNkMsZ0JBQVZOLEVBRlosT0FHZkQsRUFBSVEsT0FBUyxJQUhFSixFQUFBSyxPQUFBLFNBSVJULEVBQUlVLEtBQU8sNkJBSkhOLEVBQUFFLEtBQUEsRUFBQSxNQUFBLEtBQUEsRUFBQSxHQU1FLGFBQVZMLEVBTlEsT0FPZkQsRUFBSVEsT0FBUyxJQVBFSixFQUFBSyxPQUFBLFNBUVJULEVBQUlVLEtBQU8scUNBUkhOLEVBQUFFLEtBQUEsRUFBQSxNQUFBLEtBQUEsRUFBQSxPQVVqQkssUUFBUUMsSUFBSSw4QkFFWnpCLEVBQWEwQixTQUFTLGVBQ2hCWCxHQUFNLEVBQUFsQixHQUFBLFdBYktvQixFQUFBRSxLQUFBLEdBZVhRLFFBQVFDLElBQUk3QixFQUFPOEIsSUFBUCxXQUFBLElBQUFDLEVBQUFyQixrQkFBQUMsbUJBQUFDLEtBQVcsU0FBQW9CLEVBQU1DLEdBQU4sT0FBQXRCLG1CQUFBTSxLQUFBLFNBQUFpQixHQUFBLE9BQUEsT0FBQUEsRUFBQWYsS0FBQWUsRUFBQWQsTUFBQSxLQUFBLEVBQUEsR0FBQWMsRUFBQUMsR0FBV0YsRUFBRUcsTUFBYkYsRUFBQUMsR0FBQSxPQUFBRCxFQUFBZCxLQUFBLEVBQTRCYSxFQUFFRyxNQUFNcEIsR0FBcENrQixFQUFBZCxLQUFBLEVBQUEsTUFBQSxLQUFBLEVBQUFjLEVBQUFDLEdBQUFELEVBQUFHLEtBQUEsS0FBQSxFQUFBLE9BQUFILEVBQUFYLE9BQUEsU0FBQVcsRUFBQUMsSUFBQSxLQUFBLEVBQUEsSUFBQSxNQUFBLE9BQUFELEVBQUFJLFNBQUFOLE1BQVgsT0FBQSxTQUFBTyxHQUFBLE9BQUFSLEVBQUFTLE1BQUFwQyxLQUFBcUMsWUFBQSxLQWZELEtBQUEsR0FBQSxPQUFBdkIsRUFBQUUsS0FBQSxHQWlCWG5CLEVBQWFtQyxNQUFNcEIsR0FqQlIsS0FBQSxHQUFBLE9BbUJqQkYsRUFBSVEsT0FBUyxJQW5CSUosRUFBQUssT0FBQSxTQW9CVlQsRUFBSVUsS0FBTyxtQ0FwQkQsS0FBQSxHQUFBLElBQUEsTUFBQSxPQUFBTixFQUFBb0IsU0FBQXpCLE1BQW5CLE9BQUEsU0FBQTZCLEdBQUEsT0FBQWpDLEVBQUErQixNQUFBcEMsS0FBQXFDLFlBQUEsSUFMaUIxQyxFQUFBQSxJQUFBQSxXQUFBQSxXQUFBQSxJQUFBQSxFQUFBQSxrQkFBQUEsbUJBQUFBLEtBNEJJLFNBQUE0QyxFQUFNN0IsR0FBTixPQUFBSCxtQkFBQU0sS0FBQSxTQUFBMkIsR0FBQSxPQUFBLE9BQUFBLEVBQUF6QixLQUFBeUIsRUFBQXhCLE1BQUEsS0FBQSxFQUFBLE9BQ25CTixFQUFJUSxPQUFTLElBRE1zQixFQUFBckIsT0FBQSxTQUVaVCxFQUFJVSxLQUFPLHlDQUZDLEtBQUEsRUFBQSxJQUFBLE1BQUEsT0FBQW9CLEVBQUFOLFNBQUFLLE1BNUJKNUMsT0FBQUEsU0FBQUEsR0FBQUEsT0FBQUEsRUFBQUEsTUFBQUEsS0FBQUEsWUFBQUEsSUFnQ2pCRyxFQUFLTSxJQUFJLFVBQVQsV0FBQSxJQUFBcUMsRUFBQW5DLGtCQUFBQyxtQkFBQUMsS0FBb0IsU0FBQWtDLEVBQU1oQyxHQUFOLE9BQUFILG1CQUFBTSxLQUFBLFNBQUE4QixHQUFBLE9BQUEsT0FBQUEsRUFBQTVCLEtBQUE0QixFQUFBM0IsTUFBQSxLQUFBLEVBQUEyQixFQUFBWixHQTlCcEJsQyxFQUFZRCxXQThCUStDLEVBQUEzQixLQTlCYyxhQThCZDJCLEVBQUFaLEdBQUEsRUFBQSxFQUFBLE1BQUEsS0FBQSxFQUFBLE9BR2RyQixFQUFJUSxPQUFTLElBSEN5QixFQUFBeEIsT0FBQSxTQTlCY1QsRUFBQVUsS0FBQSwyQkE4QmQsS0FBQSxFQUFBLE9BN0JwQlYsRUFBQVEsT0FBQSxJQTZCb0J5QixFQUFBeEIsT0FBQSxTQU9QVCxFQUFJVSxLQUFPLE1BUEosS0FBQSxFQUFBLElBQUEsTUFBQSxPQUFBdUIsRUFBQVQsU0FBQVEsTUFBcEIsT0FBQSxTQUFBRSxHQUFBLE9BQUFILEVBQUFMLE1BQUFwQyxLQUFBcUMsWUFBQSxJQTlCa0N2QyxxQkFGRStDLFdBQUFBIiwiZmlsZSI6InRlc3RSb3V0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUm91dGVyIGZyb20gJ2tvYS1yb3V0ZXInO1xuaW1wb3J0IHV1aWRWNCBmcm9tICd1dWlkL3Y0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVzdFJvdXRlciBleHRlbmRzIFJvdXRlciB7XG5cbiAgICBjb25zdHJ1Y3RvcihzdG9yZXMsIHNxbEV2ZW50RmVlZCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmdldCgnL3Jlc2V0JywgYXN5bmMgY3R4ID0+IHtcbiAgICAgIGNvbnN0IHN0YXRlID0gc3FsRXZlbnRGZWVkLmdldFN0YXRlKCk7XG4gICAgICBpZiAoc3RhdGUgPT09ICdyZXNldHRpbmcnIHx8IHN0YXRlID09PSAncmVzZXQtc3RhcnQnKSB7XG4gICAgICAgIGN0eC5zdGF0dXMgPSAyMDA7XG4gICAgICAgIHJldHVybiBjdHguYm9keSA9ICdSZXNldCBhbHJlYWR5IGluIHByb2dyZXNzJztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHN0YXRlID09PSAnc3RhcnRpbmcnKSB7XG4gICAgICAgIGN0eC5zdGF0dXMgPSA1MDM7XG4gICAgICAgIHJldHVybiBjdHguYm9keSA9ICdQcm9qZWN0aW9ucyBhcmUgc3RpbGwgYmVpbmcgYnVpbHQnO1xuICAgICAgfVxuICAgICAgY29uc29sZS5sb2coJ3NldHRpbmcgc3RhdGUgdG8gcmVzZXR0aW5nJyk7XG4gICAgICAvLyBnZW5lcmF0ZSBhIG5ldyBhY3RpdmUgc3RhdGUga2V5IHRvIHN3YXAgb3VyIHByb2plY3Rpb24gd3JpdGVzIG92ZXIgdG9cbiAgICAgIHNxbEV2ZW50RmVlZC5zZXRTdGF0ZSgncmVzZXQtc3RhcnQnKTtcbiAgICAgIGNvbnN0IGtleSA9IHV1aWRWNCgpO1xuICAgICAgLy8gaGF2ZSBhbGwgc3RvcmVzIHN3aXRjaCB0aGVpciB3cml0ZSBtb2RlbCBvdmVyIHRvIHRoZSBuZXcga2V5XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChzdG9yZXMubWFwKGFzeW5jIHAgPT4gcC5yZXNldCAmJiBhd2FpdCBwLnJlc2V0KGtleSkpKTtcbiAgICAgIC8vIHJlc2V0IHRoZSBib29rbWFyayBhbmQgc3RhcnQgcmVidWlsZGluZyBwcm9qZWN0aW9ucyBvbiB0aGUgbmV3IGJvb2ttYXJrXG4gICAgICBhd2FpdCBzcWxFdmVudEZlZWQucmVzZXQoa2V5KTtcblxuICAgICAgY3R4LnN0YXR1cyA9IDIwMDtcbiAgICAgIHJldHVybiBjdHguYm9keSA9ICdSZXNldCBhbGwgcHJvamVjdGlvbnMgYW5kIHN0YXRlJztcbiAgICB9KTtcblxuICAgIHRoaXMuZ2V0KCcvdmVyc2lvbicsIGFzeW5jIGN0eCA9PiB7XG4gICAgICBjdHguc3RhdHVzID0gMjAwO1xuICAgICAgcmV0dXJuIGN0eC5ib2R5ID0gJ1Byb2plY3Rpb24gd2l0aCBzdWJzY3JpYmVyIGRlcGVuZGVuY3knO1xuICAgIH0pO1xuICAgIHRoaXMuZ2V0KCcvaGVhbHRoJywgYXN5bmMgY3R4ID0+IHtcbiAgICAgIHN3aXRjaCAoc3FsRXZlbnRGZWVkLmdldFN0YXRlKCkpIHtcbiAgICAgICAgY2FzZSAnc3RhcnRpbmcnOlxuICAgICAgICAgIGN0eC5zdGF0dXMgPSA1MDM7XG4gICAgICAgICAgcmV0dXJuIGN0eC5ib2R5ID0gJ1Byb2plY3Rpb25zIGlzIGJ1aWxkaW5nJztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjdHguc3RhdHVzID0gMjAwO1xuICAgICAgICAgIHJldHVybiBjdHguYm9keSA9ICdPSyc7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxufVxuIl19

"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _koaRouter=_interopRequireDefault(require("koa-router")),_v=_interopRequireDefault(require("uuid/v4"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function asyncGeneratorStep(e,t,r,n,o,u,a){try{var i=e[u](a),s=i.value}catch(e){return void r(e)}i.done?t(s):Promise.resolve(s).then(n,o)}function _asyncToGenerator(i){return function(){var e=this,a=arguments;return new Promise(function(t,r){var n=i.apply(e,a);function o(e){asyncGeneratorStep(n,t,r,o,u,"next",e)}function u(e){asyncGeneratorStep(n,t,r,o,u,"throw",e)}o(void 0)})}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var TestRouter=function(e){function t(n,o){var e;return _classCallCheck(this,t),(e=_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))).get("/reset",function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){var r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if("resetting"===o.getState())return t.status=200,e.abrupt("return",t.body="Reset already in progress");e.next=4;break;case 4:return r=(0,_v.default)(),e.next=7,Promise.all(n.map(function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(e.t0=t.reset,e.t0)return e.next=4,t.reset(r);e.next=5;break;case 4:e.t0=e.sent;case 5:return e.abrupt("return",e.t0);case 6:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()));case 7:return e.next=9,o.reset(r);case 9:return t.status=200,e.abrupt("return",t.body="Reset all projections and state");case 11:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()),e.get("/version",function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t.status=200,e.abrupt("return",t.body="Projection with subscriber dependency");case 2:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()),e.get("/health",function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:e.t0=o.getState(),e.next="starting"===e.t0?3:5;break;case 3:return t.status=503,e.abrupt("return",t.body="Projections is building");case 5:return t.status=200,e.abrupt("return",t.body="Projection with subscriber dependency");case 7:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()),e}return _inherits(t,_koaRouter.default),t}();exports.default=TestRouter;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RSb3V0ZXIuanMiXSwibmFtZXMiOlsiX2tvYVJvdXRlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3YiLCJUZXN0Um91dGVyIiwic3RvcmVzIiwic3FsRXZlbnRGZWVkIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfZ2V0UHJvdG90eXBlT2YiLCJjYWxsIiwiZ2V0IiwiX3JlZiIsIl9hc3luY1RvR2VuZXJhdG9yIiwicmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUyIiwiY3R4Iiwia2V5Iiwid3JhcCIsIl9jb250ZXh0MiIsInByZXYiLCJuZXh0IiwiZ2V0U3RhdGUiLCJzdGF0dXMiLCJhYnJ1cHQiLCJib2R5IiwiZGVmYXVsdCIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJfcmVmMiIsIl9jYWxsZWUiLCJwIiwiX2NvbnRleHQiLCJ0MCIsInJlc2V0Iiwic2VudCIsInN0b3AiLCJfeDIiLCJhcHBseSIsImFyZ3VtZW50cyIsIl94IiwiX3JlZjMiLCJfY2FsbGVlMyIsIl9jb250ZXh0MyIsIl94MyIsIl9yZWY0IiwiX2NhbGxlZTQiLCJfY29udGV4dDQiLCJfeDQiLCJSb3V0ZXIiXSwibWFwcGluZ3MiOiIyRkFBQSxJQUFBQSxXQUFBQyx1QkFBQUMsUUFBQSxlQUNBQyxHQUFBRix1QkFBQUMsUUFBQSw0a0RBRXFCRSx1QkFFakIsU0FBQUEsRUFBWUMsRUFBUUMsR0FBYyxJQUFBQyxFQUFBLE9BQUFDLGdCQUFBQyxLQUFBTCxJQUNsQ0csRUFBQUcsMkJBQUFELEtBQUFFLGdCQUFBUCxHQUFBUSxLQUFBSCxRQUVLSSxJQUFJLFNBQVQsV0FBQSxJQUFBQyxFQUFBQyxrQkFBQUMsbUJBQUFDLEtBQW1CLFNBQUFDLEVBQU1DLEdBQU4sSUFBQUMsRUFBQSxPQUFBSixtQkFBQUssS0FBQSxTQUFBQyxHQUFBLE9BQUEsT0FBQUEsRUFBQUMsS0FBQUQsRUFBQUUsTUFBQSxLQUFBLEVBQUEsR0FFSCxjQVRwQmxCLEVBQUFtQixXQU91QixPQUdmTixFQUFJTyxPQUFTLElBSEVKLEVBQUFLLE9BQUEsU0FJUlIsRUFBSVMsS0FBTyw2QkFKSE4sRUFBQUUsS0FBQSxFQUFBLE1BQUEsS0FBQSxFQUFBLE9BT1hKLEdBQU0sRUFBQWpCLEdBQUEwQixXQVBLUCxFQUFBRSxLQUFBLEVBU1hNLFFBQVFDLElBQUkxQixFQUFPMkIsSUFBUCxXQUFBLElBQUFDLEVBQUFsQixrQkFBQUMsbUJBQUFDLEtBQVcsU0FBQWlCLEVBQU1DLEdBQU4sT0FBQW5CLG1CQUFBSyxLQUFBLFNBQUFlLEdBQUEsT0FBQSxPQUFBQSxFQUFBYixLQUFBYSxFQUFBWixNQUFBLEtBQUEsRUFBQSxHQUFBWSxFQUFBQyxHQUFXRixFQUFFRyxNQUFiRixFQUFBQyxHQUFBLE9BQUFELEVBQUFaLEtBQUEsRUFBNEJXLEVBQUVHLE1BQU1sQixHQUFwQ2dCLEVBQUFaLEtBQUEsRUFBQSxNQUFBLEtBQUEsRUFBQVksRUFBQUMsR0FBQUQsRUFBQUcsS0FBQSxLQUFBLEVBQUEsT0FBQUgsRUFBQVQsT0FBQSxTQUFBUyxFQUFBQyxJQUFBLEtBQUEsRUFBQSxJQUFBLE1BQUEsT0FBQUQsRUFBQUksU0FBQU4sTUFBWCxPQUFBLFNBQUFPLEdBQUEsT0FBQVIsRUFBQVMsTUFBQWpDLEtBQUFrQyxZQUFBLEtBVEQsS0FBQSxFQUFBLE9BQUFyQixFQUFBRSxLQUFBLEVBV1hsQixFQUFhZ0MsTUFBTWxCLEdBWFIsS0FBQSxFQUFBLE9BYWpCRCxFQUFJTyxPQUFTLElBYklKLEVBQUFLLE9BQUEsU0FjVlIsRUFBSVMsS0FBTyxtQ0FkRCxLQUFBLEdBQUEsSUFBQSxNQUFBLE9BQUFOLEVBQUFrQixTQUFBdEIsTUFBbkIsT0FBQSxTQUFBMEIsR0FBQSxPQUFBOUIsRUFBQTRCLE1BQUFqQyxLQUFBa0MsWUFBQSxJQWlCQXBDLEVBQUtNLElBQUksV0FBVCxXQUFBLElBQUFnQyxFQUFBOUIsa0JBQUFDLG1CQUFBQyxLQUFxQixTQUFBNkIsRUFBTTNCLEdBQU4sT0FBQUgsbUJBQUFLLEtBQUEsU0FBQTBCLEdBQUEsT0FBQSxPQUFBQSxFQUFBeEIsS0FBQXdCLEVBQUF2QixNQUFBLEtBQUEsRUFBQSxPQUNuQkwsRUFBSU8sT0FBUyxJQURNcUIsRUFBQXBCLE9BQUEsU0FFWlIsRUFBSVMsS0FBTyx5Q0FGQyxLQUFBLEVBQUEsSUFBQSxNQUFBLE9BQUFtQixFQUFBUCxTQUFBTSxNQUFyQixPQUFBLFNBQUFFLEdBQUEsT0FBQUgsRUFBQUgsTUFBQWpDLEtBQUFrQyxZQUFBLElBSUFwQyxFQUFLTSxJQUFJLFVBQVQsV0FBQSxJQUFBb0MsRUFBQWxDLGtCQUFBQyxtQkFBQUMsS0FBb0IsU0FBQWlDLEVBQU0vQixHQUFOLE9BQUFILG1CQUFBSyxLQUFBLFNBQUE4QixHQUFBLE9BQUEsT0FBQUEsRUFBQTVCLEtBQUE0QixFQUFBM0IsTUFBQSxLQUFBLEVBQUEyQixFQUFBZCxHQUNWL0IsRUFBYW1CLFdBREgwQixFQUFBM0IsS0ExQkhwQixhQTBCRytDLEVBQUFkLEdBQUEsRUFBQSxFQUFBLE1BQUEsS0FBQSxFQUFBLE9BR2RsQixFQUFJTyxPQUFTLElBSEN5QixFQUFBeEIsT0FBQSxTQUlQUixFQUFJUyxLQUFPLDJCQUpKLEtBQUEsRUFBQSxPQU1kVCxFQUFJTyxPQUFTLElBTkN5QixFQUFBeEIsT0FBQSxTQXhCcEJSLEVBQUFTLEtBQUEseUNBd0JvQixLQUFBLEVBQUEsSUFBQSxNQUFBLE9BQUF1QixFQUFBWCxTQUFBVSxNQUFwQixPQUFBLFNBQUFFLEdBQUEsT0FBQUgsRUFBQVAsTUFBQWpDLEtBQUFrQyxZQUFBLElBeEJrQ3BDLHFCQUZFOEMsV0FBQUEiLCJmaWxlIjoidGVzdFJvdXRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSb3V0ZXIgZnJvbSAna29hLXJvdXRlcic7XG5pbXBvcnQgdXVpZFY0IGZyb20gJ3V1aWQvdjQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXN0Um91dGVyIGV4dGVuZHMgUm91dGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHN0b3Jlcywgc3FsRXZlbnRGZWVkKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuZ2V0KCcvcmVzZXQnLCBhc3luYyBjdHggPT4ge1xuICAgICAgY29uc3Qgc3RhdGUgPSBzcWxFdmVudEZlZWQuZ2V0U3RhdGUoKTtcbiAgICAgIGlmIChzdGF0ZSA9PT0gJ3Jlc2V0dGluZycpIHtcbiAgICAgICAgY3R4LnN0YXR1cyA9IDIwMDtcbiAgICAgICAgcmV0dXJuIGN0eC5ib2R5ID0gJ1Jlc2V0IGFscmVhZHkgaW4gcHJvZ3Jlc3MnO1xuICAgICAgfVxuICAgICAgLy8gZ2VuZXJhdGUgYSBuZXcgYWN0aXZlIHN0YXRlIGtleSB0byBzd2FwIG91ciBwcm9qZWN0aW9uIHdyaXRlcyBvdmVyIHRvXG4gICAgICBjb25zdCBrZXkgPSB1dWlkVjQoKTtcbiAgICAgIC8vIGhhdmUgYWxsIHN0b3JlcyBzd2l0Y2ggdGhlaXIgd3JpdGUgbW9kZWwgb3ZlciB0byB0aGUgbmV3IGtleVxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoc3RvcmVzLm1hcChhc3luYyBwID0+IHAucmVzZXQgJiYgYXdhaXQgcC5yZXNldChrZXkpKSk7XG4gICAgICAvLyByZXNldCB0aGUgYm9va21hcmsgYW5kIHN0YXJ0IHJlYnVpbGRpbmcgcHJvamVjdGlvbnMgb24gdGhlIG5ldyBib29rbWFya1xuICAgICAgYXdhaXQgc3FsRXZlbnRGZWVkLnJlc2V0KGtleSk7XG5cbiAgICAgIGN0eC5zdGF0dXMgPSAyMDA7XG4gICAgICByZXR1cm4gY3R4LmJvZHkgPSAnUmVzZXQgYWxsIHByb2plY3Rpb25zIGFuZCBzdGF0ZSc7XG4gICAgfSk7XG5cbiAgICB0aGlzLmdldCgnL3ZlcnNpb24nLCBhc3luYyBjdHggPT4ge1xuICAgICAgY3R4LnN0YXR1cyA9IDIwMDtcbiAgICAgIHJldHVybiBjdHguYm9keSA9ICdQcm9qZWN0aW9uIHdpdGggc3Vic2NyaWJlciBkZXBlbmRlbmN5JztcbiAgICB9KTtcbiAgICB0aGlzLmdldCgnL2hlYWx0aCcsIGFzeW5jIGN0eCA9PiB7XG4gICAgICBzd2l0Y2ggKHNxbEV2ZW50RmVlZC5nZXRTdGF0ZSgpKSB7XG4gICAgICAgIGNhc2UgJ3N0YXJ0aW5nJzpcbiAgICAgICAgICBjdHguc3RhdHVzID0gNTAzO1xuICAgICAgICAgIHJldHVybiBjdHguYm9keSA9ICdQcm9qZWN0aW9ucyBpcyBidWlsZGluZyc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY3R4LnN0YXR1cyA9IDIwMDtcbiAgICAgICAgICByZXR1cm4gY3R4LmJvZHkgPSAnUHJvamVjdGlvbiB3aXRoIHN1YnNjcmliZXIgZGVwZW5kZW5jeSc7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxufVxuIl19

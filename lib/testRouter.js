"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _koaRouter=_interopRequireDefault(require("koa-router")),_v=_interopRequireDefault(require("uuid/v4"));function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function asyncGeneratorStep(t,e,r,n,o,u,a){try{var s=t[u](a),i=s.value}catch(t){return void r(t)}s.done?e(i):Promise.resolve(i).then(n,o)}function _asyncToGenerator(s){return function(){var t=this,a=arguments;return new Promise(function(e,r){var n=s.apply(t,a);function o(t){asyncGeneratorStep(n,e,r,o,u,"next",t)}function u(t){asyncGeneratorStep(n,e,r,o,u,"throw",t)}o(void 0)})}}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var TestRouter=function(t){function e(o,u){var t;return _classCallCheck(this,e),(t=_possibleConstructorReturn(this,_getPrototypeOf(e).call(this))).get("/reset",function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){var r,n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if("resetting"===(r=u.getState())||"reset-start"===r)return e.status=200,t.abrupt("return",e.body="Reset already in progress");t.next=6;break;case 6:if("starting"===r)return e.status=503,t.abrupt("return",e.body="Projections are still being built");t.next=9;break;case 9:return console.log("setting state to resetting"),u.setState("reset-start"),n=(0,_v.default)(),t.next=14,Promise.all(o.map(function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(t.t0=e.reset,t.t0)return t.next=4,e.reset(n);t.next=5;break;case 4:t.t0=t.sent;case 5:return t.abrupt("return",t.t0);case 6:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()));case 14:return t.next=16,u.reset(n);case 16:return e.status=200,t.abrupt("return",e.body="Reset all projections and state");case 18:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()),t.get("/version",function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e.status=200,t.abrupt("return",e.body="Projection with subscriber dependency");case 2:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()),t.get("/health",function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:t.t0=u.getState(),t.next="starting"===t.t0?3:5;break;case 3:return e.status=503,t.abrupt("return",e.body="Projections is building");case 5:return e.status=200,t.abrupt("return",e.body="OK");case 7:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()),t}return _inherits(e,_koaRouter.default),e}();exports.default=TestRouter;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RSb3V0ZXIuanMiXSwibmFtZXMiOlsiX2tvYVJvdXRlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3YiLCJUZXN0Um91dGVyIiwic3RvcmVzIiwic3FsRXZlbnRGZWVkIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfZ2V0UHJvdG90eXBlT2YiLCJjYWxsIiwiZ2V0IiwiX3JlZiIsIl9hc3luY1RvR2VuZXJhdG9yIiwicmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUyIiwiY3R4Iiwic3RhdGUiLCJrZXkiLCJ3cmFwIiwiX2NvbnRleHQyIiwicHJldiIsIm5leHQiLCJnZXRTdGF0ZSIsInN0YXR1cyIsImFicnVwdCIsImJvZHkiLCJjb25zb2xlIiwibG9nIiwic2V0U3RhdGUiLCJkZWZhdWx0IiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsIl9yZWYyIiwiX2NhbGxlZSIsInAiLCJfY29udGV4dCIsInQwIiwicmVzZXQiLCJzZW50Iiwic3RvcCIsIl94MiIsImFwcGx5IiwiYXJndW1lbnRzIiwiX3giLCJfY2FsbGVlMyIsIl9jb250ZXh0MyIsIl9yZWY0IiwiX2NhbGxlZTQiLCJfY29udGV4dDQiLCJfeDQiLCJSb3V0ZXIiXSwibWFwcGluZ3MiOiIyRkFBQSxJQUFBQSxXQUFBQyx1QkFBQUMsUUFBQSxlQUNBQyxHQUFBRix1QkFBQUMsUUFBQSw0a0RBRXFCRSx1QkFFakIsU0FBQUEsRUFBWUMsRUFBUUMsR0FBYyxJQUFBQyxFQUFBLE9BQUFDLGdCQUFBQyxLQUFBTCxJQUNsQ0csRUFBQUcsMkJBQUFELEtBQUFFLGdCQUFBUCxHQUFBUSxLQUFBSCxRQUVLSSxJQUFJLFNBQVQsV0FBQSxJQUFBQyxFQUFBQyxrQkFBQUMsbUJBQUFDLEtBQW1CLFNBQUFDLEVBQU1DLEdBQU4sSUFBQUMsRUFBQUMsRUFBQSxPQUFBTCxtQkFBQU0sS0FBQSxTQUFBQyxH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TCxNQUFBckMsS0FBQXNDLFlBQUEsSUE5QmtDeEMscUJBRkVnRCxXQUFBQSIsImZpbGUiOiJ0ZXN0Um91dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJvdXRlciBmcm9tICdrb2Etcm91dGVyJztcbmltcG9ydCB1dWlkVjQgZnJvbSAndXVpZC92NCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlc3RSb3V0ZXIgZXh0ZW5kcyBSb3V0ZXIge1xuXG4gICAgY29uc3RydWN0b3Ioc3RvcmVzLCBzcWxFdmVudEZlZWQpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5nZXQoJy9yZXNldCcsIGFzeW5jIGN0eCA9PiB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHNxbEV2ZW50RmVlZC5nZXRTdGF0ZSgpO1xuICAgICAgaWYgKHN0YXRlID09PSAncmVzZXR0aW5nJyB8fCBzdGF0ZSA9PT0gJ3Jlc2V0LXN0YXJ0Jykge1xuICAgICAgICBjdHguc3RhdHVzID0gMjAwO1xuICAgICAgICByZXR1cm4gY3R4LmJvZHkgPSAnUmVzZXQgYWxyZWFkeSBpbiBwcm9ncmVzcyc7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChzdGF0ZSA9PT0gJ3N0YXJ0aW5nJykge1xuICAgICAgICBjdHguc3RhdHVzID0gNTAzO1xuICAgICAgICByZXR1cm4gY3R4LmJvZHkgPSAnUHJvamVjdGlvbnMgYXJlIHN0aWxsIGJlaW5nIGJ1aWx0JztcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKCdzZXR0aW5nIHN0YXRlIHRvIHJlc2V0dGluZycpO1xuICAgICAgLy8gZ2VuZXJhdGUgYSBuZXcgYWN0aXZlIHN0YXRlIGtleSB0byBzd2FwIG91ciBwcm9qZWN0aW9uIHdyaXRlcyBvdmVyIHRvXG4gICAgICBzcWxFdmVudEZlZWQuc2V0U3RhdGUoJ3Jlc2V0LXN0YXJ0Jyk7XG4gICAgICBjb25zdCBrZXkgPSB1dWlkVjQoKTtcbiAgICAgIC8vIGhhdmUgYWxsIHN0b3JlcyBzd2l0Y2ggdGhlaXIgd3JpdGUgbW9kZWwgb3ZlciB0byB0aGUgbmV3IGtleVxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoc3RvcmVzLm1hcChhc3luYyBwID0+IHAucmVzZXQgJiYgYXdhaXQgcC5yZXNldChrZXkpKSk7XG4gICAgICAvLyByZXNldCB0aGUgYm9va21hcmsgYW5kIHN0YXJ0IHJlYnVpbGRpbmcgcHJvamVjdGlvbnMgb24gdGhlIG5ldyBib29rbWFya1xuICAgICAgYXdhaXQgc3FsRXZlbnRGZWVkLnJlc2V0KGtleSk7XG5cbiAgICAgIGN0eC5zdGF0dXMgPSAyMDA7XG4gICAgICByZXR1cm4gY3R4LmJvZHkgPSAnUmVzZXQgYWxsIHByb2plY3Rpb25zIGFuZCBzdGF0ZSc7XG4gICAgfSk7XG5cbiAgICB0aGlzLmdldCgnL3ZlcnNpb24nLCBhc3luYyBjdHggPT4ge1xuICAgICAgY3R4LnN0YXR1cyA9IDIwMDtcbiAgICAgIHJldHVybiBjdHguYm9keSA9ICdQcm9qZWN0aW9uIHdpdGggc3Vic2NyaWJlciBkZXBlbmRlbmN5JztcbiAgICB9KTtcbiAgICB0aGlzLmdldCgnL2hlYWx0aCcsIGFzeW5jIGN0eCA9PiB7XG4gICAgICBzd2l0Y2ggKHNxbEV2ZW50RmVlZC5nZXRTdGF0ZSgpKSB7XG4gICAgICAgIGNhc2UgJ3N0YXJ0aW5nJzpcbiAgICAgICAgICBjdHguc3RhdHVzID0gNTAzO1xuICAgICAgICAgIHJldHVybiBjdHguYm9keSA9ICdQcm9qZWN0aW9ucyBpcyBidWlsZGluZyc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY3R4LnN0YXR1cyA9IDIwMDtcbiAgICAgICAgICByZXR1cm4gY3R4LmJvZHkgPSAnT0snO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==

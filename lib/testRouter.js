"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _koaRouter=_interopRequireDefault(require("koa-router")),_v=_interopRequireDefault(require("uuid/v4"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function asyncGeneratorStep(e,t,r,n,o,u,a){try{var s=e[u](a),i=s.value}catch(e){return void r(e)}s.done?t(i):Promise.resolve(i).then(n,o)}function _asyncToGenerator(s){return function(){var e=this,a=arguments;return new Promise(function(t,r){var n=s.apply(e,a);function o(e){asyncGeneratorStep(n,t,r,o,u,"next",e)}function u(e){asyncGeneratorStep(n,t,r,o,u,"throw",e)}o(void 0)})}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var TestRouter=function(e){function t(r,n,o){var e;return _classCallCheck(this,t),(e=_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))).get("/reset",function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if("resetting"===o.state)return t.status=200,e.abrupt("return",t.body="Reset already in progress");e.next=3;break;case 3:return o.key=(0,_v.default)(),o.state="resetting",e.next=7,Promise.all(r.map(function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(e.t0=t.reset,e.t0)return e.next=4,t.reset(o.key);e.next=5;break;case 4:e.t0=e.sent;case 5:return e.abrupt("return",e.t0);case 6:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()));case 7:return e.next=9,n.reset(o);case 9:return o.swap=_asyncToGenerator(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.all(r.map(function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(e.t0=t.swap,e.t0)return e.next=4,t.swap();e.next=5;break;case 4:e.t0=e.sent;case 5:return e.abrupt("return",e.t0);case 6:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()));case 2:o.state="running";case 3:case"end":return e.stop()}},e)})),t.status=200,e.abrupt("return",t.body="Reset all projections and state");case 12:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()),e.get("/version",function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t.status=200,e.abrupt("return",t.body="Projection with subscriber dependency");case 2:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()),e}return _inherits(t,_koaRouter.default),t}();exports.default=TestRouter;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RSb3V0ZXIuanMiXSwibmFtZXMiOlsiX2tvYVJvdXRlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3YiLCJUZXN0Um91dGVyIiwic3RvcmVzIiwic3FsRXZlbnRGZWVkIiwiYWN0aXZlU3RhdGUiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9nZXRQcm90b3R5cGVPZiIsImNhbGwiLCJnZXQiLCJfcmVmIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZTQiLCJjdHgiLCJ3cmFwIiwiX2NvbnRleHQ0IiwicHJldiIsIm5leHQiLCJzdGF0ZSIsInN0YXR1cyIsImFicnVwdCIsImJvZHkiLCJrZXkiLCJkZWZhdWx0IiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsIl9yZWYyIiwiX2NhbGxlZSIsInAiLCJfY29udGV4dCIsInQwIiwicmVzZXQiLCJzZW50Iiwic3RvcCIsIl94MiIsImFwcGx5IiwiYXJndW1lbnRzIiwic3dhcCIsIl9jYWxsZWUzIiwiX2NvbnRleHQzIiwiX3JlZjQiLCJfY2FsbGVlMiIsIl9jb250ZXh0MiIsIl94MyIsIl94IiwiX3JlZjUiLCJfY2FsbGVlNSIsIl9jb250ZXh0NSIsIl94NCIsIlJvdXRlciJdLCJtYXBwaW5ncyI6IjJGQUFBLElBQUFBLFdBQUFDLHVCQUFBQyxRQUFBLGVBQ0FDLEdBQUFGLHVCQUFBQyxRQUFBLDRrREFFcUJFLHVCQUVuQixTQUFBQSxFQUFZQyxFQUFRQyxFQUFjQyxHQUFhLElBQUFDLEVBQUEsT0FBQUMsZ0JBQUFDLEtBQUFOLElBQzdDSSxFQUFBRywyQkFBQUQsS0FBQUUsZ0JBQUFSLEdBQUFTLEtBQUFILFFBRUtJLElBQUksU0FBVCxXQUFBLElBQUFDLEVBQUFDLGtCQUFBQyxtQkFBQUMsS0FBbUIsU0FBQUMsRUFBTUMsR0FBTixPQUFBSCxtQkFBQUksS0FB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QUFBLElBQUEsTUFBQSxPQUFBMkIsRUFBQWQsU0FBQWEsTUFBckIsT0FBQSxTQUFBRSxHQUFBLE9BQUFILEVBQUFWLE1BQUFqQyxLQUFBa0MsWUFBQSxJQXpCNkNwQyxxQkFGVGlELFdBQUFBIiwiZmlsZSI6InRlc3RSb3V0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUm91dGVyIGZyb20gJ2tvYS1yb3V0ZXInO1xuaW1wb3J0IHV1aWRWNCBmcm9tICd1dWlkL3Y0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVzdFJvdXRlciBleHRlbmRzIFJvdXRlciB7XG5cbiAgY29uc3RydWN0b3Ioc3RvcmVzLCBzcWxFdmVudEZlZWQsIGFjdGl2ZVN0YXRlKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuZ2V0KCcvcmVzZXQnLCBhc3luYyBjdHggPT4ge1xuICAgICAgaWYgKGFjdGl2ZVN0YXRlLnN0YXRlID09PSAncmVzZXR0aW5nJykge1xuICAgICAgICBjdHguc3RhdHVzID0gMjAwO1xuICAgICAgICByZXR1cm4gY3R4LmJvZHkgPSAnUmVzZXQgYWxyZWFkeSBpbiBwcm9ncmVzcyc7XG4gICAgICB9XG4gICAgICAvLyBnZW5lcmF0ZSBhIG5ldyBhY3RpdmUgc3RhdGUga2V5IHRvIHN3YXAgb3VyIHByb2plY3Rpb24gd3JpdGVzIG92ZXIgdG9cbiAgICAgIGFjdGl2ZVN0YXRlLmtleSA9IHV1aWRWNCgpO1xuICAgICAgYWN0aXZlU3RhdGUuc3RhdGUgPSAncmVzZXR0aW5nJztcbiAgICAgIC8vIGhhdmUgYWxsIHN0b3JlcyBzd2l0Y2ggdGhlaXIgd3JpdGUgbW9kZWwgb3ZlciB0byB0aGUgbmV3IGtleVxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoc3RvcmVzLm1hcChhc3luYyBwID0+IHAucmVzZXQgJiYgYXdhaXQgcC5yZXNldChhY3RpdmVTdGF0ZS5rZXkpKSk7XG4gICAgICAvLyByZXNldCB0aGUgYm9va21hcmsgYW5kIHN0YXJ0IHJlYnVpbGRpbmcgcHJvamVjdGlvbnMgb24gdGhlIG5ldyBib29rbWFya1xuICAgICAgYXdhaXQgc3FsRXZlbnRGZWVkLnJlc2V0KGFjdGl2ZVN0YXRlKTtcbiAgICAgIC8vIHN3YXAgdGhlIHN0b3JlcyByZWFkIG1vZGVsIG92ZXIgdG8gdGhlIHVwZGF0ZWQgbW9kZWwuXG4gICAgICBhY3RpdmVTdGF0ZS5zd2FwID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChzdG9yZXMubWFwKGFzeW5jIHAgPT4gcC5zd2FwICYmIGF3YWl0IHAuc3dhcCgpKSk7XG4gICAgICAgIGFjdGl2ZVN0YXRlLnN0YXRlID0gJ3J1bm5pbmcnO1xuICAgICAgfTtcblxuICAgICAgY3R4LnN0YXR1cyA9IDIwMDtcbiAgICAgIHJldHVybiBjdHguYm9keSA9ICdSZXNldCBhbGwgcHJvamVjdGlvbnMgYW5kIHN0YXRlJztcbiAgICB9KTtcblxuICAgIHRoaXMuZ2V0KCcvdmVyc2lvbicsIGFzeW5jIGN0eCA9PiB7XG4gICAgICBjdHguc3RhdHVzID0gMjAwO1xuICAgICAgcmV0dXJuIGN0eC5ib2R5ID0gJ1Byb2plY3Rpb24gd2l0aCBzdWJzY3JpYmVyIGRlcGVuZGVuY3knO1xuICAgIH0pO1xuICB9XG59XG4iXX0=

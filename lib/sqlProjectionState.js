"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _mongoose=_interopRequireDefault(require("mongoose"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function asyncGeneratorStep(e,t,n,r,o,a,i){try{var c=e[a](i),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,o)}function _asyncToGenerator(c){return function(){var e=this,i=arguments;return new Promise(function(t,n){var r=c.apply(e,i);function o(e){asyncGeneratorStep(r,t,n,o,a,"next",e)}function a(e){asyncGeneratorStep(r,t,n,o,a,"throw",e)}o(void 0)})}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var defaultKey="sql.projectionState",ProjectionStateSchema=new _mongoose.default.Schema({id:String,bookmark:Number}),activeDataKey="sql.activeKey",ActiveDataSchema=new _mongoose.default.Schema({id:String,key:String}),ProjectionState=function e(){var o=this;_classCallCheck(this,e),_defineProperty(this,"getActiveKey",_asyncToGenerator(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,o.ActiveDataModel.findOne({id:activeDataKey});case 2:return(null==(t=e.sent)?void 0:t.key)&&(o.projectionStateKey="".concat(defaultKey,".").concat(null==t?void 0:t.key),o.ProjectionStateModel=_mongoose.default.model(o.key,ProjectionStateSchema)),e.abrupt("return",(null==t?void 0:t.key)||"");case 5:case"end":return e.stop()}},e)}))),_defineProperty(this,"setKey",function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,o.ActiveDataModel.findOne({id:activeDataKey});case 2:return(n=e.sent)||((n=new o.ActiveDataModel).id=activeDataKey),n.key=t,e.next=7,n.save();case 7:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()),_defineProperty(this,"bookmark",_asyncToGenerator(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,o.ProjectionStateModel.findOne({id:defaultKey});case 2:if((t=e.sent)||((t=new o.ProjectionStateModel).id=defaultKey),t.bookmark){e.next=8;break}return t.bookmark=0,e.next=8,t.save();case 8:return e.abrupt("return",t.bookmark);case 9:case"end":return e.stop()}},e)}))),_defineProperty(this,"setBookmark",function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,o.ProjectionStateModel.findOne({id:defaultKey});case 2:return(n=e.sent)||((n=new o.ProjectionStateModel).id=defaultKey),n.bookmark=t,e.next=7,n.save();case 7:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()),_defineProperty(this,"reset",function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function e(t){var n,r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n="".concat(defaultKey,".").concat(t),r=o.ProjectionStateModel,o.ProjectionStateModel=_mongoose.default.model(n,ProjectionStateSchema),e.next=5,o.ProjectionStateModel.findOneAndUpdate({id:defaultKey},{bookmark:0},{upsert:!0});case 5:r.collection.drop(),o.projectionStateKey=newKey,o.setKey(t);case 8:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()),this.projectionStateKey=defaultKey,this.ProjectionStateModel=_mongoose.default.model(defaultKey,ProjectionStateSchema),this.ActiveDataModel=_mongoose.default.model(activeDataKey,ActiveDataSchema)};exports.default=ProjectionState;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
